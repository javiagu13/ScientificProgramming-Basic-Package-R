# numberCol1
# numberCol2<-runif(10, min=0, max=1)
# numberCol2
# data<-as.data.frame(matrix(c(numberCol1,numberCol2),ncol=2))
# data
# mat<-data.matrix(data)
#
plotMutualInformation(data)
#'plotMutualInformation
#'
#' @description plots mutual information correlation
#' @param data the dataset to be plotted
#' @param xVar x variable
#' @param yVar y variable
#' @return it returns the plot
#'
plotMutualInformation<-function(data){
data<-atributesCorrelation(data)
len<-length(data)
endRow<-ncol(data)
for (i in 1:len){
if(endRow==0){
print("endRow")
endRow<-ncol(data)
}
print(data[i])
endRow<-endRow-1
}
newData<-rowMeans(data)
print(newData)
#data<-as.data.frame(matrix(c(xVar,yVar),ncol=2))
#ggplot(data) +  aes(x = xVar, y = yVar) +  geom_point(colour = "#0c4c8a") +  theme_minimal()
ggplot(mtcars, aes(x=as.factor(newData), fill=as.factor(newData) )) +
geom_bar( ) +
scale_fill_brewer(palette = "Set1") +
theme(legend.position="none")
}
#TEST
# numberCol1<-runif(10, min=0, max=1)
# numberCol1
# numberCol2<-runif(10, min=0, max=1)
# numberCol2
# data<-as.data.frame(matrix(c(numberCol1,numberCol2),ncol=2))
# data
# mat<-data.matrix(data)
#
plotMutualInformation(data)
#'plotMutualInformation
#'
#' @description plots mutual information correlation
#' @param data the dataset to be plotted
#' @param xVar x variable
#' @param yVar y variable
#' @return it returns the plot
#'
plotMutualInformation<-function(data){
data<-atributesCorrelation(data)
len<-length(data)
endRow<-ncol(data)
for (i in 1:len){
if(endRow==0){
print("endRow")
endRow<-ncol(data)
}
print(data[i])
endRow<-endRow-1
}
newData<-rowMeans(data)
print(as.factor(newData))
#data<-as.data.frame(matrix(c(xVar,yVar),ncol=2))
#ggplot(data) +  aes(x = xVar, y = yVar) +  geom_point(colour = "#0c4c8a") +  theme_minimal()
ggplot(mtcars, aes(x=as.factor(newData), fill=as.factor(newData) )) +
geom_bar( ) +
scale_fill_brewer(palette = "Set1") +
theme(legend.position="none")
}
#TEST
# numberCol1<-runif(10, min=0, max=1)
# numberCol1
# numberCol2<-runif(10, min=0, max=1)
# numberCol2
# data<-as.data.frame(matrix(c(numberCol1,numberCol2),ncol=2))
# data
# mat<-data.matrix(data)
#
plotMutualInformation(data)
#'plotMutualInformation
#'
#' @description plots mutual information correlation
#' @param data the dataset to be plotted
#' @param xVar x variable
#' @param yVar y variable
#' @return it returns the plot
#'
plotMutualInformation<-function(data){
data<-atributesCorrelation(data)
len<-length(data)
endRow<-ncol(data)
for (i in 1:len){
if(endRow==0){
print("endRow")
endRow<-ncol(data)
}
print(data[i])
endRow<-endRow-1
}
newData<-rowMeans(data)
print(as.numeric(newData))
#data<-as.data.frame(matrix(c(xVar,yVar),ncol=2))
#ggplot(data) +  aes(x = xVar, y = yVar) +  geom_point(colour = "#0c4c8a") +  theme_minimal()
ggplot(mtcars, aes(x=as.factor(newData), fill=as.factor(newData) )) +
geom_bar( ) +
scale_fill_brewer(palette = "Set1") +
theme(legend.position="none")
}
#TEST
# numberCol1<-runif(10, min=0, max=1)
# numberCol1
# numberCol2<-runif(10, min=0, max=1)
# numberCol2
# data<-as.data.frame(matrix(c(numberCol1,numberCol2),ncol=2))
# data
# mat<-data.matrix(data)
#
plotMutualInformation(data)
#'plotMutualInformation
#'
#' @description plots mutual information correlation
#' @param data the dataset to be plotted
#' @param xVar x variable
#' @param yVar y variable
#' @return it returns the plot
#'
plotMutualInformation<-function(data){
data<-atributesCorrelation(data)
len<-length(data)
endRow<-ncol(data)
for (i in 1:len){
if(endRow==0){
print("endRow")
endRow<-ncol(data)
}
print(data[i])
endRow<-endRow-1
}
newData<-as.numeric(rowMeans(data))
print(as.numeric(newData))
#data<-as.data.frame(matrix(c(xVar,yVar),ncol=2))
#ggplot(data) +  aes(x = xVar, y = yVar) +  geom_point(colour = "#0c4c8a") +  theme_minimal()
ggplot(mtcars, aes(x=as.factor(newData), fill=as.factor(newData) )) +
geom_bar( ) +
scale_fill_brewer(palette = "Set1") +
theme(legend.position="none")
}
#TEST
# numberCol1<-runif(10, min=0, max=1)
# numberCol1
# numberCol2<-runif(10, min=0, max=1)
# numberCol2
# data<-as.data.frame(matrix(c(numberCol1,numberCol2),ncol=2))
# data
# mat<-data.matrix(data)
#
plotMutualInformation(data)
#'plotMutualInformation
#'
#' @description plots mutual information correlation
#' @param data the dataset to be plotted
#' @param xVar x variable
#' @param yVar y variable
#' @return it returns the plot
#'
plotMutualInformation<-function(data){
data<-atributesCorrelation(data)
len<-length(data)
endRow<-ncol(data)
for (i in 1:len){
if(endRow==0){
print("endRow")
endRow<-ncol(data)
}
print(data[i])
endRow<-endRow-1
}
newData<-as.numeric(rowMeans(data))
#data<-as.data.frame(matrix(c(xVar,yVar),ncol=2))
#ggplot(data) +  aes(x = xVar, y = yVar) +  geom_point(colour = "#0c4c8a") +  theme_minimal()
ggplot(newData, aes(x=as.factor(newData), fill=as.factor(newData) )) +
geom_bar( ) +
scale_fill_brewer(palette = "Set1") +
theme(legend.position="none")
}
#TEST
# numberCol1<-runif(10, min=0, max=1)
# numberCol1
# numberCol2<-runif(10, min=0, max=1)
# numberCol2
# data<-as.data.frame(matrix(c(numberCol1,numberCol2),ncol=2))
# data
# mat<-data.matrix(data)
#
plotMutualInformation(data)
#'plotMutualInformation
#'
#' @description plots mutual information correlation
#' @param data the dataset to be plotted
#' @param xVar x variable
#' @param yVar y variable
#' @return it returns the plot
#'
plotMutualInformation<-function(data){
data<-atributesCorrelation(data)
len<-length(data)
endRow<-ncol(data)
for (i in 1:len){
if(endRow==0){
print("endRow")
endRow<-ncol(data)
}
print(data[i])
endRow<-endRow-1
}
newData<-as.numeric(rowMeans(data))
#data<-as.data.frame(matrix(c(xVar,yVar),ncol=2))
#ggplot(data) +  aes(x = xVar, y = yVar) +  geom_point(colour = "#0c4c8a") +  theme_minimal()
ggplot(data, aes(x=as.factor(newData), fill=as.factor(newData) )) +
geom_bar( ) +
scale_fill_brewer(palette = "Set1") +
theme(legend.position="none")
}
#TEST
# numberCol1<-runif(10, min=0, max=1)
# numberCol1
# numberCol2<-runif(10, min=0, max=1)
# numberCol2
# data<-as.data.frame(matrix(c(numberCol1,numberCol2),ncol=2))
# data
# mat<-data.matrix(data)
#
plotMutualInformation(data)
#'plotMutualInformation
#'
#' @description plots mutual information correlation
#' @param data the dataset to be plotted
#' @param xVar x variable
#' @param yVar y variable
#' @return it returns the plot
#'
plotMutualInformation<-function(data){
data<-atributesCorrelation(data)
len<-length(data)
endRow<-ncol(data)
for (i in 1:len){
if(endRow==0){
print("endRow")
endRow<-ncol(data)
}
print(data[i])
endRow<-endRow-1
}
newData<-as.numeric(rowMeans(data))
data<-as.data.frame(data)
#data<-as.data.frame(matrix(c(xVar,yVar),ncol=2))
#ggplot(data) +  aes(x = xVar, y = yVar) +  geom_point(colour = "#0c4c8a") +  theme_minimal()
ggplot(data, aes(x=as.factor(newData), fill=as.factor(newData) )) +
geom_bar( ) +
scale_fill_brewer(palette = "Set1") +
theme(legend.position="none")
}
#TEST
# numberCol1<-runif(10, min=0, max=1)
# numberCol1
# numberCol2<-runif(10, min=0, max=1)
# numberCol2
# data<-as.data.frame(matrix(c(numberCol1,numberCol2),ncol=2))
# data
# mat<-data.matrix(data)
#
plotMutualInformation(data)
#'plotMutualInformation
#'
#' @description plots mutual information correlation
#' @param data the dataset to be plotted
#' @param xVar x variable
#' @param yVar y variable
#' @return it returns the plot
#'
plotMutualInformation<-function(data){
data<-atributesCorrelation(data)
len<-length(data)
endRow<-ncol(data)
for (i in 1:len){
if(endRow==0){
print("endRow")
endRow<-ncol(data)
}
print(data[i])
endRow<-endRow-1
}
newData<-as.numeric(rowMeans(data))
newDataFrame<-as.data.frame(newData)
#data<-as.data.frame(matrix(c(xVar,yVar),ncol=2))
#ggplot(data) +  aes(x = xVar, y = yVar) +  geom_point(colour = "#0c4c8a") +  theme_minimal()
ggplot(newDataFrame, aes(x=as.factor(newData), fill=as.factor(newData) )) +
geom_bar( ) +
scale_fill_brewer(palette = "Set1") +
theme(legend.position="none")
}
#TEST
# numberCol1<-runif(10, min=0, max=1)
# numberCol1
# numberCol2<-runif(10, min=0, max=1)
# numberCol2
# data<-as.data.frame(matrix(c(numberCol1,numberCol2),ncol=2))
# data
# mat<-data.matrix(data)
#
plotMutualInformation(data)
#'plotMutualInformation
#'
#' @description plots mutual information correlation
#' @param data the dataset to be plotted
#' @param xVar x variable
#' @param yVar y variable
#' @return it returns the plot
#'
plotMutualInformation<-function(data){
data<-atributesCorrelation(data)
len<-length(data)
endRow<-ncol(data)
for (i in 1:len){
if(endRow==0){
print("endRow")
endRow<-ncol(data)
}
print(data[i])
endRow<-endRow-1
}
newData<-as.numeric(rowMeans(data))
newDataFrame<-as.data.frame(newData)
#data<-as.data.frame(matrix(c(xVar,yVar),ncol=2))
#ggplot(data) +  aes(x = xVar, y = yVar) +  geom_point(colour = "#0c4c8a") +  theme_minimal()
barplot(newData)
}
#TEST
# numberCol1<-runif(10, min=0, max=1)
# numberCol1
# numberCol2<-runif(10, min=0, max=1)
# numberCol2
# data<-as.data.frame(matrix(c(numberCol1,numberCol2),ncol=2))
# data
# mat<-data.matrix(data)
#
plotMutualInformation(data)
#'plotMutualInformation
#'
#' @description plots mutual information correlation
#' @param data the dataset to be plotted
#' @param xVar x variable
#' @param yVar y variable
#' @return it returns the plot
#'
plotMutualInformation<-function(data){
data<-atributesCorrelation(data)
newData<-rowMeans(data)
barplot(newData)
}
plotMutualInformation(data)
#'plotMutualInformation
#'
#' @description plots mutual information correlation
#' @param data the dataset to be plotted
#' @param xVar x variable
#' @param yVar y variable
#' @return it returns the plot
#'
plotMutualInformation<-function(data){
data<-atributesCorrelation(data)
newData<-rowMeans(data)
barplot(newData, main="Percentage of Mutual information between the given variable and the rest of the dataset", xlab="Variable Name", ylab="Percentage of simminarity with the rest of the dataset")
}
plotMutualInformation(data)
#'plotAUC
#'
#' @description it plots the area under the curve given a dataset of numbers and classes using a threshold as
#' in the previous AUC calculus.
#' @param data has two columns, the first of numbers where a threshold will be applied and the second
#' one of actual classes
#' @param threshold is the threshold to make true or false the values on the first column
#' @return AUC curve
#'
plotAUC<-function(data,threshold){
mat<-data.matrix(data)
for (i in 1:length(mat[,1])){
if (mat[,1][i]<=threshold){
mat[,1][i]=0
}
else{
mat[,1][i]=1
}
}
roc(mat[,1], mat[,2],percent=TRUE, plot=TRUE, ci=TRUE)
}
#'plotAUC
#'
#' @description it plots the area under the curve given a dataset of numbers and classes using a threshold as
#' in the previous AUC calculus.
#' @param data has two columns, the first of numbers where a threshold will be applied and the second
#' one of actual classes
#' @param threshold is the threshold to make true or false the values on the first column
#' @return AUC curve
#'
plotAUC<-function(data,threshold){
mat<-data.matrix(data)
for (i in 1:length(mat[,1])){
if (mat[,1][i]<=threshold){
mat[,1][i]=0
}
else{
mat[,1][i]=1
}
}
roc(mat[,1], mat[,2],percent=TRUE, plot=TRUE, ci=TRUE)
}
#Test
numberCol<-runif(10, min=0, max=1)
numberCol
boolCol<-sample(c(TRUE,FALSE), 10, TRUE)
boolCol
data<-as.data.frame(matrix(c(numberCol,boolCol),ncol=2))
data
mat<-data.matrix(data)
plotAUC(data,0.5)
#'plotAUC
#'
#' @description it plots the area under the curve given a dataset of numbers and classes using a threshold as
#' in the previous AUC calculus.
#' @param data has two columns, the first of numbers where a threshold will be applied and the second
#' one of actual classes
#' @param threshold is the threshold to make true or false the values on the first column
#' @return AUC curve
#'
plotAUC<-function(data,threshold){
mat<-data.matrix(data)
for (i in 1:length(mat[,1])){
if (mat[,1][i]<=threshold){
mat[,1][i]=0
}
else{
mat[,1][i]=1
}
}
roc(mat[,1],percent=TRUE, plot=TRUE, ci=TRUE)
}
#Test
numberCol<-runif(10, min=0, max=1)
numberCol
boolCol<-sample(c(TRUE,FALSE), 10, TRUE)
boolCol
data<-as.data.frame(matrix(c(numberCol,boolCol),ncol=2))
data
mat<-data.matrix(data)
plotAUC(data,0.5)
#'plotAUC
#'
#' @description it plots the area under the curve given a dataset of numbers and classes using a threshold as
#' in the previous AUC calculus.
#' @param data has two columns, the first of numbers where a threshold will be applied and the second
#' one of actual classes
#' @param threshold is the threshold to make true or false the values on the first column
#' @return AUC curve
#'
plotAUC<-function(data){
mat<-data.matrix(data)
roc(mat[,1], mat[,2],percent=TRUE, plot=TRUE, ci=TRUE)
}
#Test
numberCol<-runif(10, min=0, max=1)
numberCol
boolCol<-sample(c(TRUE,FALSE), 10, TRUE)
boolCol
data<-as.data.frame(matrix(c(numberCol,boolCol),ncol=2))
data
mat<-data.matrix(data)
plotAUC(data,0.5)
plotAUC(data)
boolCol
data<-as.data.frame(matrix(c(numberCol,boolCol),ncol=2))
data
mat<-data.matrix(data)
plotAUC(data)
variableNormalization<-function(v){
v.norm <- (v - min(v)) / (max(v) - min(v))
return(list(v.norm,min(v),max(v)))
}
#test
numberCol1<-runif(10, min=0, max=10)
numberCol1
variableNormalization(numberCol1)
roxygen2::roxygenise()
yes
yes
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
cd ..
cd..
roxygen2::roxygenise()
roxygen2::roxygenise()
