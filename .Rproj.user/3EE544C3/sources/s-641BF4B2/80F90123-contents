## ---- echo=FALSE-------------------------------------------------------------------------------------------------


## ----------------------------------------------------------------------------------------------------------------
ejecutarAlgo <- function (argumento.obligatorio, argumento.opcional="Valor por defecto") {
  # C?digo a ejecutar
}


## ----------------------------------------------------------------------------------------------------------------
getRandomPermutation <- function (size) {
  permu <- sample(1:size)
  return(permu)
}

getRandomPermutation(10)
getRandomPermutation(size=5)


## ----------------------------------------------------------------------------------------------------------------
applyPermutation <- function (text, permu=1:nchar(text)) {
  chars <- unlist(strsplit(text, split=""))
  chars.reordered <- chars[permu]
  return(paste(chars.reordered, collapse=""))
}
txt <- "Este es mi texto"
applyPermutation(txt)
applyPermutation(txt, getRandomPermutation(nchar(txt)))


## ----------------------------------------------------------------------------------------------------------------
getAverage <- function (x, averaging.function=mean, ...){
  return(averaging.function(x, ...))
}
data <- rnorm(25, mean=0, sd=1)
data
getAverage(data)
getAverage(data, averaging.function=median)
getAverage(data, averaging.function=quantile, p=0.5)


## ----------------------------------------------------------------------------------------------------------------
argumentos <- list()
txt <- "Texto a permutar"
argumentos$text  <- txt
argumentos$permu <- sample(1:nchar(txt))

do.call(what=applyPermutation, args=argumentos)


## ----------------------------------------------------------------------------------------------------------------
argumentos$permu <- sample(1:nchar(txt))
do.call(what=applyPermutation, args=argumentos)
argumentos$permu <- 1:nchar(txt)
do.call(what=applyPermutation, args=argumentos)


## ---- eval=FALSE-------------------------------------------------------------------------------------------------
## ################################################################################
## # Cabecera del script con una descripcion de lo que hace                       #
## # *****************************************************************************#
## # Autor/a:  Nombre de quien ha desarrollado el script, tal vez con informacion #
## #           de contacto                                                        #
## # Fecha:    Fecha de la ultima modificacion                                    #
## ################################################################################
## 
## # DEFINICION DE VARIABLES GLOBALES ---------------------------------------------
## parametro.1     <- "valor para el parametro 1 del analisis"
## parametro.2     <- "valor para el parametro 2 del analisis"
## path.resultados <- "/path/al/directorio/de/datos"
## path.funciones  <- "/path/al/directorio/del/script/de/fuciones"
## 
## 
## # FUNCIONES A UTILIZAR ---------------------------------------------------------
## source(paste(path.funciones,"fuciones_analisis.R",sep="/"))
## source(paste(path.funciones,"fuciones_plotting.R",sep="/"))
## 
## # CARGA DE DATOS ---------------------------------------------------------------
## source("./script_carga_de_datos.R")
## 
## # PRIMERA PARTE DEL ANALISIS ---------------------------------------------------
## # Codigo del analisis
## 
## # SEGUNDA PARTE DEL ANALISIS ---------------------------------------------------
## # Codigo del analisis


## ----------------------------------------------------------------------------------------------------------------
isPermutation <- function (vector) {
  result <- class(vector)=="numeric" | class(vector) == "integer"
  if(result) {
    result = all(sort(vector) == 1:length(vector))
  }
  return (result)
}

isPermutation(c("A", "B"))
isPermutation(sample(1:4))
isPermutation(c(2,1,3,5))


## ----------------------------------------------------------------------------------------------------------------
`%?%` <-function (permu1, permu2) {
  if (!isPermutation(permu1) | !isPermutation(permu2)) {
    stop ("This operator only works with permutations!")
  } else {
    return (permu1[permu2]) 
  }
}


## ----------------------------------------------------------------------------------------------------------------
permutacion1 <- c(5,2,1,6,3,4)
permutacion2 <- c(6,5,4,3,2,1)
permutacion1 %?% permutacion2


## ----------------------------------------------------------------------------------------------------------------
invert <- function(permu) {
  if (!isPermutation(permu))
  {
    stop("This function only works with permutations")
  } else {
    return(order(permu))
  }
}
permutacion1.inversa <- invert(permutacion1)
permutacion1
permutacion1.inversa
permutacion1 %?% permutacion1.inversa
permutacion1.inversa %?% permutacion1


## ----------------------------------------------------------------------------------------------------------------
swap <- function(permu, i, j) {
  if (!isPermutation(permu))
  {
    stop("This function only works with permutations")
  } else {
    aux <- permu[i]
    permu[i] <- permu[j]
    permu[j] <- aux
    return(permu)
  }
}
permutacion1
swap(permutacion1, 1, 6)
permutacion1


## ----------------------------------------------------------------------------------------------------------------
insert <- function(permu, i, j) {
  if (!isPermutation(permu))
  {
    stop("This function only works with permutations")
  } else {
    if (i>1 & j>1) {
      np1 <- permu[1:min(i-1,j-1)]
    } else {
      np1 <- vector()
    }
    if(i < j) {
      if (j < length(permu)) {
        np2 <- c(permu[(i+1):j], permu[i], permu[(j+1):length(permu)])
      } else {
        np2 <- c(permu[(i+1):j], permu[i])
      }
    } else {
      if (i < length(permu)) {
        np2 <- c(permu[i], permu[j:(i-1)], permu[(i+1):length(permu)])
      } else {
        np2 <- c(permu[i], permu[j:(i-1)])
      }
    }
    return(c(np1, np2))
  }
}
permutacion1
insert(permutacion1, 2, 5)
insert(permutacion1, 2, 6)
insert(permutacion1, 4, 2)
insert(permutacion1, 3, 1)


## ---- eval=FALSE, echo=FALSE-------------------------------------------------------------------------------------
## # R3.1  mirar google
library(classInt)
discretizeEW <- function (x, num.bins) {
  classIntervals(x, num.bins)
  x.discretized <- classIntervals(x, num.bins, style = 'equal')
  cut.points<-x.discretized$brks
  #auxiliar array where the first value must be a bit less than actual
  #for a good functioning of cut function
  aux<-cut.points
  aux[1]<-aux[1]-0.1
  x.discretized<- cut(x, breaks = aux, labels = FALSE)
  return(list(x.discretized, cut.points))
}

result<-discretizeEW(1:10, 5)

## 
## # R3.2
#TODO
discretizeEF <- function (x, num.bins) {
  classIntervals(x, num.bins)
  x.discretized <- classIntervals(x, num.bins, style = 'quantile')
  cut.points<-x.discretized$brks
  #auxiliar array where the first value must be a bit less than actual
  #for a good functioning of cut function
  aux<-cut.points
  aux[1]<-aux[1]-0.1
  x.discretized<- cut(x, breaks = aux, labels = FALSE)
  return(list(x.discretized, cut.points))
}
result<-discretizeEF(1:10, 5)
print(result)


## 
## # R3.3
discretize <- function (x, cut.points) {
    aux<-cut.points
    aux[1]<-aux[1]-0.1
    x.discretized<- cut(x, breaks = aux, labels = FALSE)
    
   return(list(x.discretized, cut.points))
}
bek<-c(1,2.8,4.6,6.4,8.2,10)
result<-discretize(1:10, bek)
result
## R3.4
entropy <- function (x){
  arrayOfFrequencies<-c()
  for (i in min(x):max(x)){
    #numero de apariciones de i
    appearances<-sum(x == i)
    #probabilidad de aparicion
    probability<-appearances/length(x)
    arrayOfFrequencies <- c(arrayOfFrequencies, probability)
    }
  print(arrayOfFrequencies)
  
  total<-0
  for (i in arrayOfFrequencies){
    total<-(total-i*log2(i))
    print(total)
  }
  
  return(total)
}

resul<-entropy(c(1,1,2,1,2))
resul

a<-0.1
-log2(a)*a-log2(a)*a-log2(a)*a-log2(a)*a-log2(a)*a-log2(a)*a-log2(a)*a-log2(a)*a-log2(a)*a-log2(a)*a
