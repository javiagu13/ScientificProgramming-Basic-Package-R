## ---- echo=FALSE----------------------------------------------------------------------------------------------------------


## ---- fig.asp=0.5, echo=-1------------------------------------------------------------------------------------------------
par(cex=0.75)
x <- seq(0, 1, 0.01)
y <- dbeta(x, shape1=2, shape2=5)
plot(x, y)


## ---- fig.asp=0.5, echo=-1------------------------------------------------------------------------------------------------
par(cex=0.75)
plot(x, y, type='l', col='green', main="Distribuci?n beta", xlab="", ylab="Densidad", bty='n')


## ---- fig.asp=0.5---------------------------------------------------------------------------------------------------------
par(cex=0.75)
plot(x, y, type='l', col='green', main="Distribuci?n beta", xlab="", ylab="Densidad", bty='n')
points(rbeta(100, shape1=2, shape2=5), runif(100)/2)


## ---- fig.asp=0.5---------------------------------------------------------------------------------------------------------
par(cex=0.75)
muestreo <- rbeta(100, shape1=2, shape2=5)
densidad <- density(muestreo)
densidad
plot(densidad)
points(muestreo, runif(100)/2)


## ---- fig.asp=0.33--------------------------------------------------------------------------------------------------------
m <- cbind(c(1,1,1,3,3),c(1,1,1,3,3),c(1,1,1,3,3),
           c(2,2,2,3,3),c(2,2,2,3,3),c(2,2,2,3,3))
lo <- layout(m)
layout.show(lo)


## ---- fig.asp=0.3, echo=-1------------------------------------------------------------------------------------------------
layout(t(c(1,2)))
par(cex=0.5)
plot(x, y, type='l', col='green', main="Distribuci?n beta", xlab="", ylab="Densidad", bty='n')
plot(densidad)
points(muestreo, runif(100)/2)
layout(1)


## ---- fig.asp=0.25--------------------------------------------------------------------------------------------------------
library(ggplot2)
datos.raw <- read.csv("https://cnecovid.isciii.es/covid19/resources/casos_tecnica_ccaa.csv", 
                      stringsAsFactors=FALSE)
datos.plot <- data.frame(Fecha=as.Date(datos.raw$fecha),
                         Casos=datos.raw$num_casos,
                         Comunidad=as.factor(datos.raw$ccaa_iso))
ggplot(data=datos.plot, mapping=aes(x=Fecha, y=Casos, col=Comunidad))


## ---- fig.asp=1-----------------------------------------------------------------------------------------------------------
ggp <- ggplot(data=datos.plot, mapping=aes(x=Fecha, y=Casos, col=Comunidad))
ggp + geom_line()


## ---- fig.asp=0.33--------------------------------------------------------------------------------------------------------
ggp + geom_line() + geom_point()


## ---- fig.asp=0.5---------------------------------------------------------------------------------------------------------
ggp + geom_line(size=0.25) + geom_point(size=0.5) +
  theme(text=element_text(size=7), legend.position=c(0.25, 0.75)) + 
  guides(color=guide_legend(ncol=5))


## ---- fig.asp=0.5, eval=FALSE---------------------------------------------------------------------------------------------
## ggp2 <- ggp + geom_line(size=0.25)
## ggp3 <- ggp2 + geom_point(size=0.5)
## ggp4 <- ggp3 + guides(color=guide_legend(ncol=5))
## tema <- theme(text=element_text(size=7), legend.position=c(0.25, 0.75))
## ggp2
## ggp3
## ggp4
## ggp4 + tema


## ---- fig.width=4, fig.align='center'-------------------------------------------------------------------------------------
ggp + coord_polar() + geom_line(show.legend=FALSE)


## ---- echo=FALSE----------------------------------------------------------------------------------------------------------
scores <- rbind(c(2,5,3.1,5.2, 7),
                c(4,1.3,2.2,1.4, 6),
                c(1,2.2,3.1,5.2, 1),
                c(3,2,4.9,4, 9))
colnames(scores) <- c("Player 1", "Player 2", 
                      "Player 3", "Player 4", "Player 5")

getPermutations <- function(scores){
  aux <- apply(scores, MARGIN=1, 
               FUN=rank, ties.method="random")
  return(t(aux))
}
getPermutations(scores)
getFirstOrderMarginals <- function (permu.set, smoothed=FALSE) {
  size <- ncol(permu.set)
  if (!smoothed) {
    getMarginal <- function (vector)
    {
      aux <- sapply(1:size, FUN=function(i) {return(sum(vector==i))})
      return (aux / sum(aux))
    }
  } else {
    getMarginal <- function (vector)
    {
      aux <- sapply(1:size, FUN=function(i) {return(sum(vector==i))})
      return ((aux + 1) / (sum(aux) + size))
    }
  }
  
  return(apply(permu.set, MARGIN=2, FUN=getMarginal))
}

getFirstOrderMarginals(getPermutations(scores))
getFirstOrderMarginals(getPermutations(scores), smoothed=TRUE)


## -------------------------------------------------------------------------------------------------------------------------
scores <- rbind(c(2,5,3.1,5.2, 7),
                c(4,1.3,2.2,1.4, 6),
                c(1,2.2,3.1,5.2, 1),
                c(3,2,4.9,4, 9))
colnames(scores) <- c("Player 1", "Player 2", 
                      "Player 3", "Player 4", "Player 5")

marg <- getFirstOrderMarginals(getPermutations(scores))
marg

library(reshape2)
df <- melt(marg)
head(df)


## ---- fig.asp=0.5---------------------------------------------------------------------------------------------------------
names(df) <- c("Posicion", "Jugador", "Marginal")
ggplot(df, aes(x=Jugador, y=Posicion, fill=Marginal)) + geom_tile() + 
  theme_bw() + theme(panel.border = element_blank(),
                     panel.grid = element_blank(),
                     axis.ticks = element_blank())


## ---- eval=FALSE----------------------------------------------------------------------------------------------------------
## library(plotly)
## x <- seq(0, 1, 0.01)
## y <- dbeta(x, shape1=2, shape2=5)
## df <- data.frame(Value=x, Density=y)
## plot_ly(data=df, x=~Value, y=~Density, type = "scatter")
## plt <- plot_ly(data=df, x=~Value, y=~Density, type = "scattergl", mode="lines")
## plt <- layout(plt, title=list(text="Beta distribbution"))
## plt


## ---- eval=FALSE----------------------------------------------------------------------------------------------------------
## plot_ly(data=df, x=~Value, y=~Density, type = "scattergl", mode="lines") %>%
##   layout(title=list(text="Beta distribbution"))


## ---- eval=FALSE----------------------------------------------------------------------------------------------------------
## x <- seq(0, 1, 0.01)
## y1 <- dbeta(x, shape1=2, shape2=5)
## y2 <- dbeta(x, shape1=5, shape2=2)
## y3 <- dbeta(x, shape1=3, shape2=3)
## 
## df <- data.frame(Value=x, Density1=y1, Density2=y2, Density3=y3)
## 
## legend <- list()
## title  <- list()
## 
## legend$title <- list(text="Distribuciones Beta")
## legend$orientation <- 'h'
## legend$y <- -0.2
## 
## title$text <- 'Ejemplos de distribuciones <em>Beta</em>'
## 
## plot_ly(data=df, x=~Value, y=~Density1, name="Beta(2,5)", type = "scattergl", mode="lines") %>%
##   add_trace(y=~Density2, name="Beta(5,2)", type = "scattergl", mode="lines") %>%
##   add_trace(y=~Density3, name="Beta(3,3)", type = "scattergl", mode="lines") %>%
##   layout(title=title, legend=legend)


## ---- eval=FALSE----------------------------------------------------------------------------------------------------------
## plot_ly(datos.plot, x=~Fecha, y=~Casos, color=~Comunidad,
##         type="scattergl", mode="lines+markers")


## ---- eval=FALSE----------------------------------------------------------------------------------------------------------
## library(plotly)
## ggplotly(p = ggp2) %>% layout(showlegend=FALSE)


## -------------------------------------------------------------------------------------------------------------------------
ops <- options()
ops$device


## ---- eval=FALSE----------------------------------------------------------------------------------------------------------
## ggp2
## dev.copy(device=jpeg, filename="grafico_copiado.jpg", width=1500, height=800)
## dev.off()


## ---- eval=FALSE----------------------------------------------------------------------------------------------------------
## jpeg(filename="grafico.jpg", width=1500, height=800)
## ggp2
## dev.off()


## ---- eval=FALSE, echo=FALSE----------------------------------------------------------------------------------------------
## # R6.1 que pone 5.1
## 

## # R6.2
## 
## 
## # R6.3
