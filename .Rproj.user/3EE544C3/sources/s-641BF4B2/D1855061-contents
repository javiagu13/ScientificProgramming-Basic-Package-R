## ---- echo=FALSE-------------------------------------------------------------------------------------------------


## ---- eval=FALSE-------------------------------------------------------------------------------------------------
## if ("condicion") {
##   #Codigo a ejecutar
## }


## ----------------------------------------------------------------------------------------------------------------
numero <- 6
if (numero %% 2 == 0) {
  message("El n?mero " , numero, " es par")
}

numero <- 3
if (numero %% 2 == 0) {
  message("El n?mero " , numero, " es par")
}


## ----------------------------------------------------------------------------------------------------------------
numero <- 7
if (numero %% 2 == 0) {
  message("El n?mero " , numero, " es par")
} else {
  message("El n?mero " , numero, " es impar")
}


## ----------------------------------------------------------------------------------------------------------------
numero <- 0
if (numero<0) {
  message("El n?mero " , numero, " es negativo")
} else if(numero==0){
  message("El n?mero " , numero, " es cero")
} else if (numero %% 2 == 0){
  message("El n?mero " , numero, " es par")
}else{
  message("El n?mero " , numero, " es impar")
}


## ----------------------------------------------------------------------------------------------------------------
idioma <- "EU"
switch (idioma,
        EU={
          message("Mezu bat")
        },
        ES={
          message("Un mensaje")
        },
        EN={
          message("A message")
        },
        {
          message("El idioma no est? definido / Hizkuntza ez dago definituta / The language is not defined")
        })


## ----------------------------------------------------------------------------------------------------------------
tryCatch({
  2 + 7
}, error=function(e){
  message("Se ha producido un error!!")
  print(e)
}, finally={
  message("Este c?digo se ejecuta siempre, haya o no error")
})

tryCatch({
  2 + "A"
}, error=function(e){
  message("Se ha producido un error!!")
  print(e)
}, finally={
  message("Este c?digo se ejecuta siempre, haya o no error")
})


## ----------------------------------------------------------------------------------------------------------------
for(i in 1:5) {
  print(i^2)
}


## ----------------------------------------------------------------------------------------------------------------
letras <- c("A","B","C","D")
for (i in 1:length(letras)){
  print(letras[i])
}

for (letra in letras) {
  print(letra)
}


## ----------------------------------------------------------------------------------------------------------------
numero.aleatorio <- round(runif(1)*100)
multiplo <- 7
while(numero.aleatorio %% multiplo !=0) {
  message("El n?mero ", numero.aleatorio, " no es m?ltiplo de ", multiplo)
  numero.aleatorio <- round(runif(1)*100)
}
message("El n?mero ", numero.aleatorio, " SI es m?ltiplo de ", multiplo)


## ----------------------------------------------------------------------------------------------------------------
textos <- c("Nombre 1", "Nombre 2", "Nombre 3", "Nombre 4")
tolower(textos)


## ----------------------------------------------------------------------------------------------------------------
integra <- function(x, y){
  integral <- 0
  for (i in 2:length(x)) {
    delta.x <- x[i] - x[i-1]
    delta.y <- y[i] - y[i-1]
    # Area de la zona rectangular
    integral <- integral + delta.x * min(y[i], y[i-1])
    #area del triangulo superior
    integral <- integral + delta.x * abs(delta.y) / 2
  }
  return(integral)
}


## ----------------------------------------------------------------------------------------------------------------
integraOptimizada <- function(x, y) {
  delta.x <- diff(x)
  mean.y  <- rowMeans(cbind(y[-1], y[-length(y)]))
  return(sum(delta.x * mean.y))
}


## ----------------------------------------------------------------------------------------------------------------
numero.de.puntos <- 10000
x <- seq(0,1, length.out=numero.de.puntos)
y <- dbeta(x, 2, 5)

system.time(integra(x, y))
system.time(integraOptimizada(x, y))

numero.de.puntos <- 10000000
x <- seq(0,1, length.out=numero.de.puntos)
y <- dbeta(x, 2, 5)

system.time(integra(x, y))
system.time(integraOptimizada(x, y))


## ----------------------------------------------------------------------------------------------------------------
integraParcial <- function(i) {
  delta.x <- x[i] - x[i-1]
  delta.y <- y[i] - y[i-1]
  integral <- delta.x * min(y[i], y[i-1]) +
    delta.x * abs(delta.y) / 2
  return(integral)
}


## ----------------------------------------------------------------------------------------------------------------
numero.de.puntos <- 1000
x <- seq(0,1, length.out=numero.de.puntos)
y <- dbeta(x, 2, 5)
resultados.parciales <- sapply(2:length(x), FUN=integraParcial)
head(resultados.parciales)
sum(resultados.parciales)


## ----------------------------------------------------------------------------------------------------------------
integraParcial <- function(i, x, y) {
  delta.x <- x[i] - x[i-1]
  delta.y <- y[i] - y[i-1]
  integral <- delta.x * min(y[i], y[i-1]) +
    delta.x * abs(delta.y) / 2
  return(integral)
}

numero.de.puntos <- 1000
vector.x <- seq(0, 0.5, length.out=numero.de.puntos)
vector.y <- dbeta(vector.x, 2, 5)

resultados.parciales <- sapply(2:length(vector.x), FUN=integraParcial, x=vector.x, y=vector.y)
head(resultados.parciales)
sum(resultados.parciales)


## ----------------------------------------------------------------------------------------------------------------
angulos <- seq(0, 2*pi, length.out=50)
resultados <- lapply(angulos,
                     FUN=function(a) {
                       fila <- data.frame("Angulo"=a, "Coseno"=cos(a), "Seno"=sin(a), "Tangente"=tan(a))
                       return(fila)
                     })
resultados[1]


## ----------------------------------------------------------------------------------------------------------------
df <- do.call(rbind, resultados)
head(df)


## ----------------------------------------------------------------------------------------------------------------
mediana.filas <- apply(df, MARGIN=1, FUN=median)
head(mediana.filas)
mediana.columnas <- apply(df, MARGIN=2, FUN=median)
mediana.columnas


## ----------------------------------------------------------------------------------------------------------------
scores <- rbind(c(2,5,3.1,5.2),
                c(4,1.3,2.2,1.4),
                c(1,2.2,3.1,5.2),
                c(3,2,4.9,4))
colnames(scores) <- c("Player 1", "Player 2",
                      "Player 3", "Player 4")

getPermutations <- function(scores){
  aux <- apply(scores, MARGIN=1,
               FUN=rank, ties.method="random")
  return(t(aux))
}
getPermutations(scores)


## ----------------------------------------------------------------------------------------------------------------
getFirstOrderMarginals <- function (permu.set, smoothed=FALSE) {
  size <- ncol(permu.set)
  if (!smoothed) {
    getMarginal <- function (vector)
    {
      aux <- sapply(1:size, FUN=function(i) {return(sum(vector==i))})
      return (aux / sum(aux))
    }
  } else {
    getMarginal <- function (vector)
    {
      aux <- sapply(1:size, FUN=function(i) {return(sum(vector==i))})
      return ((aux + 1) / (sum(aux) + size))
    }
  }

  return(apply(permu.set, MARGIN=2, FUN=getMarginal))
}

getFirstOrderMarginals(getPermutations(scores))
getFirstOrderMarginals(getPermutations(scores), smoothed=TRUE)


## ----------------------------------------------------------------------------------------------------------------
insertIn <- function (position, vector, element) {
  if (position==0) {
    vector.new <- c(element, vector)
  } else if (position==length(vector)) {
    vector.new <- c(vector, element)
  } else {
    vector.new <- c(vector[1:position], element, vector[(position+1):length(vector)])
  }
  return(vector.new)
}


## ----------------------------------------------------------------------------------------------------------------

expandPermutation <- function(permu) {
  aux <- lapply(0:length(permu), FUN=insertIn, vector=permu, element=length(permu)+1)
  return(do.call(rbind,aux))
}


## ----------------------------------------------------------------------------------------------------------------
getAllPermutations <- function (size) {
  if (size > 10) {
    stop ("We cannot generate all the premutations for size ",
          size, ", there are ", factorial(size), " combinations!!")
  }

  if (size == 1)
  {
    permus <- matrix(1, ncol=1)
  } else {
    aux <- getAllPermutations(size-1)
    aux2 <- lapply(1:nrow(aux),
                   FUN=function(i){
                     return(expandPermutation(aux[i,]))
                   })
    permus <- do.call(rbind, aux2)
  }
  return(permus)
}
getAllPermutations(3)
getAllPermutations(5)


## ---- eval=FALSE, echo=FALSE-------------------------------------------------------------------------------------
## # R4.1: goal, obtain the a vector with the variance of each column
#Creating a random matrix
mat<-matrix(sample(1:20,100,replace=TRUE),ncol=10)

vector<-c()
numberOfCol<-10
for (i in 1:numberOfCol)
  vector[i]<-var(mat[,i])

vector


## # R4.2 lo mismo pero usando entropia con un dataframe

#put numbers in consecutive order
consecutivize <-function(x){
  result<-cumsum(c(0, diff(x)) != 0) + 1
  return(result)
}

entropy <- function (x){
  arrayOfFrequencies<-c()
  x<-consecutivize(x)
  for (i in min(x):max(x)){
    #numero de apariciones de i
    appearances<-sum(x == i)
    #probabilidad de aparicion
    probability<-appearances/length(x)
    arrayOfFrequencies <- c(arrayOfFrequencies, probability)
  }

  total<-0
  for (i in arrayOfFrequencies){
    total<-(total-i*log2(i))
    print(total)
  }

  return(total)
}

entropyOfDataFrame <- function (data){
  mat<-data.matrix(data)
  vector<-c()
  numberOfCol<-length(mat[,1])
  for (i in 1:numberOfCol)
    vector[i]<-entropy(mat[,i])

return(vector)
}

#create a random matrix
mat<-matrix(sample(1:20,100,replace=TRUE),ncol=10)
data<-as.data.frame(mat)

entropyOfDataFrame(data)


## # R4.3

library(classInt)
discretizeEW <- function (x, num.bins) {
  classIntervals(x, num.bins)
  x.discretized <- classIntervals(x, num.bins, style = 'equal')
  cut.points<-x.discretized$brks
  #auxiliar array where the first value must be a bit less than actual
  #for a good functioning of cut function
  aux<-cut.points
  aux[1]<-aux[1]-0.1
  x.discretized<- cut(x, breaks = aux, labels = FALSE)
  return(list(x.discretized, cut.points))
}

result<-discretizeEW(1:10, 5)


equalWidthOfDataFrame <- function (data, stepNumber){
  mat<-as.matrix(data) #algun problema aqui interpreto
  numberOfCol<-length(mat[,1])
  for (i in 1:numberOfCol){
    print(mat[,i])
    mat[,i]<-discretizeEW(mat[,i],5)[[1]]
    }

  return(mat)
}

equalWidthOfDataFrame(data,5)

#MISMO CODIGO CON EF
#TODO


## # R4.4
# Normalize matrix
normalizeVec <- function (v) {
  result<-(v - min(v)) / (max(v) - min(v))
  return(result)
}


normalizeDataFrame <- function (data){
  mat<-data.matrix(data)
  numberOfCol<-length(mat[,1])
  for (i in 1:numberOfCol)
    mat[,i]<-normalizeVec(mat[,i])

  return(mat)
}

#create a random matrix
mat<-matrix(sample(1:20,100,replace=TRUE),ncol=10)
data<-as.data.frame(mat)

normalizeDataFrame(data)


## #R4.5 (false=0, true=1)
library(pROC)
numberCol<-runif(10, min=0, max=1)
numberCol
boolCol<-sample(c(TRUE,FALSE), 10, TRUE)
boolCol

data<-as.data.frame(matrix(c(numberCol,boolCol),ncol=2))
data
mat<-data.matrix(data)
mat[,1][1]

curveROC <- function (data, threshold){
  mat<-data.matrix(data)
  for (i in 1:length(mat[,1])){
    if (mat[,1][i]<=threshold){
      mat[,1][i]=0
    }
    else{
      mat[,1][i]=1
    }
  }
  roc(mat[,1], mat[,2],
      percent=TRUE, plot=TRUE, ci=TRUE)
  return(auc(mat[,1], mat[,2]))
}

curveROC(data,0.4)

